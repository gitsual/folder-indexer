/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FolderIndexerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var FolderIndexerPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Cargando FolderIndexer plugin");
    this.addRibbonIcon("list-ordered", "Indexar Carpetas", async () => {
      const result = await this.indexVault();
      new import_obsidian.Notice(`Actualizaci\xF3n completada: ${result.totalDirectories} directorios procesados`);
      this.showResultModal(result);
    });
  }
  async onunload() {
    console.log("Descargando FolderIndexer plugin");
  }
  async getMarkdownFiles(dir) {
    const files = this.app.vault.getMarkdownFiles();
    return files.filter((file) => {
      var _a;
      return ((_a = file.parent) == null ? void 0 : _a.path) === dir;
    });
  }
  async processDirectory(dirPath) {
    var _a;
    const dirName = dirPath.split("/").pop() || dirPath;
    const indexPath = `${dirPath}/${dirName}.md`;
    const files = await this.getMarkdownFiles(dirPath);
    const references = files.filter((file) => file.path !== indexPath).map((file) => `[[${file.basename}]]`);
    const indexFile = this.app.vault.getAbstractFileByPath(indexPath);
    if (!indexFile) {
      await this.app.vault.create(indexPath, references.join("\n"));
      return {
        created: true,
        path: indexPath,
        content: references
      };
    } else {
      const content = await this.app.vault.read(indexFile);
      const existingRefs = new Set(
        ((_a = content.match(/\[\[.*?\]\]/g)) == null ? void 0 : _a.map((ref) => ref)) || []
      );
      const newRefs = references.filter((ref) => !existingRefs.has(ref));
      if (newRefs.length > 0) {
        await this.app.vault.modify(
          indexFile,
          content + "\n" + newRefs.join("\n")
        );
        return {
          created: false,
          path: indexPath,
          content: newRefs
        };
      }
    }
    return {
      created: false,
      path: indexPath,
      content: []
    };
  }
  async indexVault() {
    const result = {
      createdFiles: [],
      updatedFiles: [],
      totalDirectories: 0
    };
    const files = this.app.vault.getAllLoadedFiles();
    const directories = new Set(
      files.filter((f) => f.parent).map((f) => {
        var _a;
        return (_a = f.parent) == null ? void 0 : _a.path;
      }).filter((p) => p !== "/")
    );
    for (const dir of directories) {
      if (dir) {
        const processResult = await this.processDirectory(dir);
        if (processResult.content.length > 0) {
          if (processResult.created) {
            result.createdFiles.push({
              path: processResult.path,
              content: processResult.content
            });
          } else {
            result.updatedFiles.push({
              path: processResult.path,
              addedContent: processResult.content
            });
          }
        }
        result.totalDirectories++;
      }
    }
    return result;
  }
  showResultModal(result) {
    new import_obsidian.Notice(`Archivos creados: ${result.createdFiles.length}
Archivos actualizados: ${result.updatedFiles.length}`);
  }
};
